#!/usr/bin/env ruby

require 'thor'
require 'pry-byebug'
require 'aws-sdk-core'
require 'date'
# require_relative '../lib/shoryuken/cli'

# begin
#   Shoryuken::CLI.instance.run(ARGV)
# rescue => e
#   raise e if $DEBUG
#   STDERR.puts e.message
#   STDERR.puts e.backtrace.join("\n")
#   exit 1
# end

# rubocop:disable Metrics/AbcSize, Metrics/LineLength
module Shoryuken
  module CLI
    class Base < Thor
      no_commands do
        def print_table(entries)
          entries.each do |entry|
            puts entry.map(&method(:format_table_column)).join
          end
        end

        def format_table_column(column)
          column = column.to_s.ljust(40)
          column = "#{column[0...40]}.." if column.size > 40
          column
        end
      end
    end
  end
end

module Shoryuken
  module CLI
    class SQS < Base
      namespace :sqs

      no_commands do
        def dump_file(path, queue_name)
          File.join(path, "#{queue_name}-#{Date.today}.jsonl")
        end
      end

      desc 'ls [QUEUE_NAME_PREFIX]', 'Returns a list of your queues.'
      def ls(queue_name_prefix = '')
        # https://docs.aws.amazon.com/sdkforruby/api/Aws/SQS/Client.html#list_queues-instance_method
        sqs = Aws::SQS::Client.new

        attrs = %w(QueueArn ApproximateNumberOfMessages ApproximateNumberOfMessagesNotVisible LastModifiedTimestamp)

        urls = sqs.list_queues(queue_name_prefix: queue_name_prefix).queue_urls

        entries = urls.map { |u| sqs.get_queue_attributes(queue_url: u, attribute_names: attrs).attributes }.map do |q|
          [
            q['QueueArn'].split(':').last,
            q['ApproximateNumberOfMessages'],
            q['ApproximateNumberOfMessagesNotVisible'],
            Time.at(q['LastModifiedTimestamp'].to_i)
          ]
        end

        entries.unshift(['Queue', 'Messages Available', 'Messages Inflight', 'Last Modified'])

        print_table(entries)
      end

      desc 'dump [QUEUE_NAME]', 'Dump messages from a queue into a JSON lines'
      method_option :number, aliases: '-n', type: :numeric, default: Float::INFINITY, desc: 'number of messages to dump'
      method_option :path,   aliases: '-p', type: :string,  default: './', desc: 'path to save the dump file'
      method_option :append, aliases: '-a', type: :boolean, default: false, desc: 'append to an existing dump file if any'
      def dump(queue_name)
        sqs = Aws::SQS::Client.new

        url = sqs.list_queues(queue_name_prefix: queue_name).queue_urls.first

        count = 0
        batch_size = options[:number] > 10 ? 10 : options[:number]

        filename = dump_file(options[:path], queue_name)

        if !options[:append] && File.exist?(filename)
          puts "#{filename} already exists"
          exit(1)
        end

        file = File.open(filename, 'ab')

        loop do
          n = options[:number] - count
          batch_size = n if n < batch_size

          messages = sqs.receive_message(
            queue_url: url,
            max_number_of_messages: batch_size,
            message_attribute_names: ['All']
          ).messages

          messages.each { |m| file.puts(JSON.dump(m.to_h)) }

          count += messages.size

          break if count >= options[:number]
          break if messages.empty?
        end
      ensure
        file.close if file
      end
    end
  end
end

module Shoryuken
  module CLI
    class Register < Thor
      register(Shoryuken::CLI::SQS, 'sqs', 'sqs <command>', 'SQS commands')
    end
  end
end

Shoryuken::CLI::Register.start
